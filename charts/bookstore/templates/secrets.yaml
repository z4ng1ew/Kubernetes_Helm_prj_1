{{- if .Values.database.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "bookstore.fullname" . }}-db-secret
  labels:
    {{- include "bookstore.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
type: Opaque
data:
  password: {{ randAlphaNum 32 | b64enc | quote }}
  username: {{ .Values.database.auth.username | b64enc | quote }}
  database: {{ .Values.database.auth.database | b64enc | quote }}

---
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "bookstore.fullname" . }}-app-secret
  labels:
    {{- include "bookstore.labels" . | nindent 4 }}
type: Opaque
data:
  secret-key: {{ randAlphaNum 50 | b64enc | quote }}
  jwt-secret: {{ randAlphaNum 32 | b64enc | quote }}

---
{{- if .Values.ingress.enabled }}
{{- if .Values.ingress.tls }}
# TLS Secret for Ingress
# Create this secret manually using:
# kubectl create secret tls bookstore-tls --cert=path/to/tls.crt --key=path/to/tls.key
# Or use cert-manager to automatically generate certificates
apiVersion: v1
kind: Secret
metadata:
  name: {{ (index .Values.ingress.tls 0).secretName }}
  labels:
    {{- include "bookstore.labels" . | nindent 4 }}
  annotations:
    # This secret should be created externally or by cert-manager
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager or manual creation
  tls.crt: ""
  tls.key: ""
{{- end }}
{{- end }}

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bookstore.fullname" . }}-config
  labels:
    {{- include "bookstore.labels" . | nindent 4 }}
data:
  app.conf: |
    # Application configuration
    debug = false
    log_level = info
    
    # Database configuration
    database_host = {{ include "bookstore.fullname" . }}-postgres
    database_port = 5432
    database_name = {{ .Values.database.auth.database }}
    
    # Security settings
    secure_cookies = true
    session_timeout = 3600
    
    # CORS settings
    cors_origins = https://{{ (index .Values.ingress.hosts 0).host }}
    
  nginx.conf: |
    # Nginx configuration for frontend
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    }
